- name: Crer to file ownership, group and permissions
  file:
    path: "{{ house }}/new_folder"
    state: directory
  tags:
    - build
    - preprod

- block:
  - name: Copy file with owner and permissions
    copy:
      content: "{{ var_my_private_key }}"
      dest: "{{ house }}/.ssh/id_rsa"
      owner: centos

  - name: Copy file daemon.json
    copy:
      src: daemon.json
      dest: "/etc/docker"
      owner: centos
      remote_src: no

  - name: Restart service docker
    service:
      name: docker
      state: restarted
  tags:
    - build
    - preprod
    - deploy

- name: Copy file planTest.jmx
  copy:
    src: planTest.jmx
    dest: "{{ house }}/new_folder"
    owner: centos
    remote_src: no
  tags:
    - preprod

# connect to private registry
- name: Log into private registry
  docker_login:
    registry: "{{ ip_resistry }}:{{ port_resistry }}"
    username: "{{ var_docker_hub_login }}"
    password: "{{ var_docker_hub_password }}"
  tags:
    - build
    - deploy

- block:
  - name: git clone the source code in github
    git:
      repo: "{{ var_repository_github }}"
      dest: "{{ house }}/new_folder"
      key_file: "{{ house }}/.ssh/id_rsa"
      accept_hostkey: yes
      force: yes
      version: "{{ repository_brach }}"
      recursive: no

  - name: Build an image Dockerfile-app
    docker_image:
      build:
        path: "{{ house }}/new_folder"
        dockerfile: Dockerfile-app
      name: "{{ ip_resistry }}:{{ port_resistry }}/{{ barry }}/{{ app_image }}"
      tag: "{{ repository_tag }}"

  - name: Build an image Dockerfile-mysql
    docker_image:
      build:
        path: "{{ house }}/new_folder"
        dockerfile: Dockerfile-mysql
      name: "{{ ip_resistry }}:{{ port_resistry }}/{{ barry }}/{{ mysql_image }}"
      tag: "{{ repository_tag }}"
  tags:
    - build

- block:
  - name: Push Dockerfile-app image
    docker_image:
      path: "{{ house }}/new_folder"
      dockerfile: Dockerfile-app
      name: "{{ ip_resistry }}:{{ port_resistry }}/{{ barry }}/{{ app_image }}"
      push: yes
      tag: "{{ repository_tag }}"

  - name: Push Dockerfile-mysql image
    docker_image:
      path: "{{ house }}/new_folder/Dockerfile-mysql"
      name: "{{ ip_resistry }}:{{ port_resistry }}/{{ barry }}/{{ mysql_image }}"
      push: yes
      tag: "{{ repository_tag }}"
  tags:
    - push

# creact network   
- name: Create a network
  docker_network:
    name: phone_network
  tags:
    - deploy
    - preprod
    - build

- block:
  - name: Create a data container phonebook-mysql
    docker_container:
      name: "{{ phonebook_mysql }}"
      image: "{{ ip_resistry }}:{{ port_resistry }}/{{ barry }}/{{ mysql_image }}:{{ repository_tag }}"
      state: started
      networks:
        - name: phone_network

  - name: sleep for 30 seconds and continue with play
    wait_for:
      timeout: 30

  - name: Create a data container phonebook-app
    docker_container:
      name: "{{ phonebook_app }}"
      image: "{{ ip_resistry }}:{{ port_resistry }}/{{ barry }}/{{ app_image }}:{{ repository_tag }}"
      state: started
      networks:
        - name: phone_network
      ports:
       - "8181:8181"
      restart: yes
  tags:
    - deploy
    - preprod

- name: Check that you can connect (GET) to a page and it returns a status 200
  uri:
    url: http://{{ adresse_preprod }}:{{ port_preprod }}
  tags:
    - testApi
